{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nvar SubformMultiTogglerComponent = /*#__PURE__*/function () {\n  function SubformMultiTogglerComponent() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, SubformMultiTogglerComponent);\n    this.controllerSelect = options.controllerSelect;\n    this.subformWrapperClass = options.subformWrapperClass;\n    this.globalWrapperSelector = options.globalWrapperSelector;\n    this._bindEvent();\n    this._runAll();\n  }\n  _createClass(SubformMultiTogglerComponent, [{\n    key: \"_runAll\",\n    value: function _runAll() {\n      var _this = this;\n      this.controllerSelect.each(function (idx, el) {\n        _this.run(el);\n      });\n    }\n  }, {\n    key: \"run\",\n    value: function run(target) {\n      var $target = $(target);\n      var subformWrapperClass = this.subformWrapperClass;\n      var value = $target.val();\n      var $form = $target.parents(this.globalWrapperSelector);\n      var $selectedSubform = $form.find(\"#\".concat(subformWrapperClass, \"-\").concat(value));\n      if ($target.prop(\"checked\")) {\n        $selectedSubform.find(\"input,textarea,select\").prop(\"disabled\", false);\n        $selectedSubform.show();\n      } else {\n        $selectedSubform.find(\"input,textarea,select\").prop(\"disabled\", true);\n        $selectedSubform.hide();\n      }\n    }\n  }, {\n    key: \"_bindEvent\",\n    value: function _bindEvent() {\n      var _this2 = this;\n      this.controllerSelect.on(\"change\", function (event) {\n        _this2.run(event.target);\n      });\n    }\n  }]);\n  return SubformMultiTogglerComponent;\n}();\nexport { SubformMultiTogglerComponent as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;IAAqBA,4BAA4B;EAC/C,wCAA0B;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAAAC;IACtB,IAAI,CAACC,gBAAgB,GAAGF,OAAO,CAACE,gBAAgB;IAChD,IAAI,CAACC,mBAAmB,GAAGH,OAAO,CAACG,mBAAmB;IACtD,IAAI,CAACC,qBAAqB,GAAGJ,OAAO,CAACI,qBAAqB;IAC1D,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACC,OAAO,EAAE;EAChB;EAACC;IAAAC;IAAAC,OAED,mBAAU;MAAA;MACR,IAAI,CAACP,gBAAgB,CAACQ,IAAI,CAAC,UAACC,GAAG,EAAEC,EAAE,EAAK;QACtCC,KAAI,CAACC,GAAG,CAACF,EAAE,CAAC;MACd,CAAC,CAAC;IACJ;EAAC;IAAAJ;IAAAC,OAED,aAAIM,MAAM,EAAE;MACV,IAAIC,OAAO,GAAGC,CAAC,CAACF,MAAM,CAAC;MACvB,IAAIZ,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;MAClD,IAAIM,KAAK,GAAGO,OAAO,CAACE,GAAG,EAAE;MAEzB,IAAIC,KAAK,GAAGH,OAAO,CAACI,OAAO,CAAC,IAAI,CAAChB,qBAAqB,CAAC;MACvD,IAAIiB,gBAAgB,GAAGF,KAAK,CAACG,IAAI,YAAKnB,mBAAmB,cAAIM,KAAK,EAAG;MAErE,IAAIO,OAAO,CAACO,IAAI,CAAC,SAAS,CAAC,EAAE;QAC3BF,gBAAgB,CAACC,IAAI,CAAC,uBAAuB,CAAC,CAACC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;QACtEF,gBAAgB,CAACG,IAAI,EAAE;MACzB,CAAC,MAAM;QACLH,gBAAgB,CAACC,IAAI,CAAC,uBAAuB,CAAC,CAACC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC;QACrEF,gBAAgB,CAACI,IAAI,EAAE;MACzB;IACF;EAAC;IAAAjB;IAAAC,OAED,sBAAa;MAAA;MACX,IAAI,CAACP,gBAAgB,CAACwB,EAAE,CAAC,QAAQ,EAAE,UAACC,KAAK,EAAK;QAC5CC,MAAI,CAACd,GAAG,CAACa,KAAK,CAACZ,MAAM,CAAC;MACxB,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA;AAAA,SApCkBhB,4BAA4B","names":["SubformMultiTogglerComponent","options","_classCallCheck","controllerSelect","subformWrapperClass","globalWrapperSelector","_bindEvent","_runAll","_createClass","key","value","each","idx","el","_this","run","target","$target","$","val","$form","parents","$selectedSubform","find","prop","show","hide","on","event","_this2"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-admin-0.27.0/app/packs/src/decidim/admin/subform_multi_toggler.component.js"],"sourcesContent":["export default class SubformMultiTogglerComponent {\n  constructor(options = {}) {\n    this.controllerSelect = options.controllerSelect;\n    this.subformWrapperClass = options.subformWrapperClass;\n    this.globalWrapperSelector = options.globalWrapperSelector;\n    this._bindEvent();\n    this._runAll();\n  }\n\n  _runAll() {\n    this.controllerSelect.each((idx, el) => {\n      this.run(el);\n    });\n  }\n\n  run(target) {\n    let $target = $(target);\n    let subformWrapperClass = this.subformWrapperClass;\n    let value = $target.val();\n\n    let $form = $target.parents(this.globalWrapperSelector);\n    let $selectedSubform = $form.find(`#${subformWrapperClass}-${value}`)\n\n    if ($target.prop(\"checked\")) {\n      $selectedSubform.find(\"input,textarea,select\").prop(\"disabled\", false);\n      $selectedSubform.show();\n    } else {\n      $selectedSubform.find(\"input,textarea,select\").prop(\"disabled\", true);\n      $selectedSubform.hide();\n    }\n  }\n\n  _bindEvent() {\n    this.controllerSelect.on(\"change\", (event) => {\n      this.run(event.target);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}