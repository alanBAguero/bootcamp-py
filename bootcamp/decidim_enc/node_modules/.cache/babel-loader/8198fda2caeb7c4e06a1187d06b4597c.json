{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport * as L from \"leaflet\";\nimport \"src/decidim/map/icon\";\nimport MapControllerRegistry from \"src/decidim/map/controller_registry\";\nvar MapController = /*#__PURE__*/function () {\n  function MapController(mapId, config) {\n    _classCallCheck(this, MapController);\n    // Remove the old map if there is already one with the same ID.\n    var old = MapControllerRegistry.getController(mapId);\n    if (old) {\n      old.remove();\n    }\n    this.mapId = mapId;\n    this.config = $.extend({\n      popupTemplateId: \"marker-popup\",\n      markerColor: \"#ef604d\"\n    }, config);\n    this.map = null;\n    this.eventHandlers = {};\n    MapControllerRegistry.setController(mapId, this);\n  }\n  _createClass(MapController, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      return this.map;\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      this.map = L.map(this.mapId);\n      this.map.scrollWheelZoom.disable();\n\n      // Fix the keyboard navigation on the map\n      this.map.on(\"popupopen\", function (ev) {\n        var $popup = $(ev.popup.getElement());\n        $popup.attr(\"tabindex\", 0).focus();\n      });\n      this.map.on(\"popupclose\", function (ev) {\n        $(ev.popup._source._icon).focus();\n      });\n      return this.map;\n    }\n\n    // Override this in the specific map controllers.\n  }, {\n    key: \"start\",\n    value: function start() {}\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.map) {\n        this.map.remove();\n        this.map = null;\n      }\n    }\n  }, {\n    key: \"createIcon\",\n    value: function createIcon() {\n      return new L.DivIcon.SVGIcon.DecidimIcon({\n        fillColor: this.config.markerColor,\n        iconSize: L.point(28, 36)\n      });\n    }\n  }, {\n    key: \"setEventHandler\",\n    value: function setEventHandler(name, callback) {\n      this.eventHandlers[name] = callback;\n    }\n  }, {\n    key: \"triggerEvent\",\n    value: function triggerEvent(eventName, payload) {\n      var handler = this.eventHandlers[eventName];\n      if (typeof handler === \"function\") {\n        return Reflect.apply(handler, this, payload);\n      }\n      return null;\n    }\n  }]);\n  return MapController;\n}();\nexport { MapController as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,CAAC,MAAM,SAAS;AAC5B,OAAO,sBAAsB;AAC7B,OAAOC,qBAAqB,MAAM,qCAAqC;AAAA,IAElDC,aAAa;EAChC,uBAAYC,KAAK,EAAEC,MAAM,EAAE;IAAAC;IACzB;IACA,IAAMC,GAAG,GAAGL,qBAAqB,CAACM,aAAa,CAACJ,KAAK,CAAC;IACtD,IAAIG,GAAG,EAAE;MACPA,GAAG,CAACE,MAAM,EAAE;IACd;IAEA,IAAI,CAACL,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGK,CAAC,CAACC,MAAM,CAAC;MACrBC,eAAe,EAAE,cAAc;MAC/BC,WAAW,EAAE;IACf,CAAC,EAAER,MAAM,CAAC;IAEV,IAAI,CAACS,GAAG,GAAG,IAAI;IACf,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IAEvBb,qBAAqB,CAACc,aAAa,CAACZ,KAAK,EAAE,IAAI,CAAC;EAClD;EAACa;IAAAC;IAAAC,OAED,qBAAY;MACV,OAAO,IAAI,CAACd,MAAM;IACpB;EAAC;IAAAa;IAAAC,OAED,kBAAS;MACP,OAAO,IAAI,CAACL,GAAG;IACjB;EAAC;IAAAI;IAAAC,OAED,gBAAO;MACL,IAAI,CAACL,GAAG,GAAGb,CAAC,CAACa,GAAG,CAAC,IAAI,CAACV,KAAK,CAAC;MAE5B,IAAI,CAACU,GAAG,CAACM,eAAe,CAACC,OAAO,EAAE;;MAElC;MACA,IAAI,CAACP,GAAG,CAACQ,EAAE,CAAC,WAAW,EAAE,UAACC,EAAE,EAAK;QAC/B,IAAMC,MAAM,GAAGd,CAAC,CAACa,EAAE,CAACE,KAAK,CAACC,UAAU,EAAE,CAAC;QACvCF,MAAM,CAACG,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAACC,KAAK,EAAE;MACpC,CAAC,CAAC;MACF,IAAI,CAACd,GAAG,CAACQ,EAAE,CAAC,YAAY,EAAE,UAACC,EAAE,EAAK;QAChCb,CAAC,CAACa,EAAE,CAACE,KAAK,CAACI,OAAO,CAACC,KAAK,CAAC,CAACF,KAAK,EAAE;MACnC,CAAC,CAAC;MAEF,OAAO,IAAI,CAACd,GAAG;IACjB;;IAEA;EAAA;IAAAI;IAAAC,OACA,iBAAQ,CAAC;EAAC;IAAAD;IAAAC,OAEV,kBAAS;MACP,IAAI,IAAI,CAACL,GAAG,EAAE;QACZ,IAAI,CAACA,GAAG,CAACL,MAAM,EAAE;QACjB,IAAI,CAACK,GAAG,GAAG,IAAI;MACjB;IACF;EAAC;IAAAI;IAAAC,OAED,sBAAa;MACX,OAAO,IAAIlB,CAAC,CAAC8B,OAAO,CAACC,OAAO,CAACC,WAAW,CAAC;QACvCC,SAAS,EAAE,IAAI,CAAC7B,MAAM,CAACQ,WAAW;QAClCsB,QAAQ,EAAElC,CAAC,CAACmC,KAAK,CAAC,EAAE,EAAE,EAAE;MAC1B,CAAC,CAAC;IACJ;EAAC;IAAAlB;IAAAC,OAED,yBAAgBkB,IAAI,EAAEC,QAAQ,EAAE;MAC9B,IAAI,CAACvB,aAAa,CAACsB,IAAI,CAAC,GAAGC,QAAQ;IACrC;EAAC;IAAApB;IAAAC,OAED,sBAAaoB,SAAS,EAAEC,OAAO,EAAE;MAC/B,IAAMC,OAAO,GAAG,IAAI,CAAC1B,aAAa,CAACwB,SAAS,CAAC;MAC7C,IAAI,OAAOE,OAAO,KAAK,UAAU,EAAE;QACjC,OAAOC,OAAO,CAACC,KAAK,CAACF,OAAO,EAAE,IAAI,EAAED,OAAO,CAAC;MAC9C;MACA,OAAO,IAAI;IACb;EAAC;EAAA;AAAA;AAAA,SAxEkBrC,aAAa","names":["L","MapControllerRegistry","MapController","mapId","config","_classCallCheck","old","getController","remove","$","extend","popupTemplateId","markerColor","map","eventHandlers","setController","_createClass","key","value","scrollWheelZoom","disable","on","ev","$popup","popup","getElement","attr","focus","_source","_icon","DivIcon","SVGIcon","DecidimIcon","fillColor","iconSize","point","name","callback","eventName","payload","handler","Reflect","apply"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-core-0.27.0/app/packs/src/decidim/map/controller.js"],"sourcesContent":["import * as L from \"leaflet\";\nimport \"src/decidim/map/icon\"\nimport MapControllerRegistry from \"src/decidim/map/controller_registry\"\n\nexport default class MapController {\n  constructor(mapId, config) {\n    // Remove the old map if there is already one with the same ID.\n    const old = MapControllerRegistry.getController(mapId);\n    if (old) {\n      old.remove();\n    }\n\n    this.mapId = mapId;\n    this.config = $.extend({\n      popupTemplateId: \"marker-popup\",\n      markerColor: \"#ef604d\"\n    }, config);\n\n    this.map = null;\n    this.eventHandlers = {};\n\n    MapControllerRegistry.setController(mapId, this);\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  getMap() {\n    return this.map;\n  }\n\n  load() {\n    this.map = L.map(this.mapId);\n\n    this.map.scrollWheelZoom.disable();\n\n    // Fix the keyboard navigation on the map\n    this.map.on(\"popupopen\", (ev) => {\n      const $popup = $(ev.popup.getElement());\n      $popup.attr(\"tabindex\", 0).focus();\n    });\n    this.map.on(\"popupclose\", (ev) => {\n      $(ev.popup._source._icon).focus();\n    });\n\n    return this.map;\n  }\n\n  // Override this in the specific map controllers.\n  start() {}\n\n  remove() {\n    if (this.map) {\n      this.map.remove();\n      this.map = null;\n    }\n  }\n\n  createIcon() {\n    return new L.DivIcon.SVGIcon.DecidimIcon({\n      fillColor: this.config.markerColor,\n      iconSize: L.point(28, 36)\n    });\n  }\n\n  setEventHandler(name, callback) {\n    this.eventHandlers[name] = callback;\n  }\n\n  triggerEvent(eventName, payload) {\n    const handler = this.eventHandlers[eventName];\n    if (typeof handler === \"function\") {\n      return Reflect.apply(handler, this, payload);\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}