{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/* eslint-disable require-jsdoc */\n\nimport attributeDiff from \"src/decidim/editor/attribute_diff\";\nexport default function backspaceBindingsRangeAny(quill) {\n  quill.keyboard.addBinding({\n    key: 8,\n    altKey: null,\n    ctrlKey: null,\n    metaKey: null,\n    shiftKey: null,\n    collapsed: true\n  }, function (range, context) {\n    var length = 1;\n    if (range.index === 0 || quill.getLength() <= 1) {\n      return;\n    }\n    var _quill$getLine = quill.getLine(range.index),\n      _quill$getLine2 = _slicedToArray(_quill$getLine, 1),\n      line = _quill$getLine2[0];\n    var formats = {};\n    if (context.offset === 0) {\n      var _quill$getLine3 = quill.getLine(range.index - 1),\n        _quill$getLine4 = _slicedToArray(_quill$getLine3, 1),\n        prev = _quill$getLine4[0];\n      if (prev !== null && prev.length() > 1) {\n        var curFormats = line.formats();\n        var prevFormats = quill.getFormat(range.index - 1, 1);\n        formats = attributeDiff(curFormats, prevFormats) || {};\n        var previousLineLength = quill.getLine(range.index - 1)[1];\n        var previousChar = quill.getText(range.index - 1, 1);\n        var beforePreviousChar = quill.getText(range.index - 2, 1);\n        if (previousLineLength && previousLineLength === 1 && beforePreviousChar === \"\\n\") {\n          if (prevFormats && prevFormats.list) {\n            quill.setSelection(range.index - 2, Quill.sources.SILENT);\n          } else if (previousChar === \"\\n\" && beforePreviousChar === \"\\n\") {\n            length += 1;\n          }\n        }\n      }\n    }\n    if (/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/.test(context.prefix)) {\n      length += 1;\n    }\n    quill.deleteText(range.index - length, length, Quill.sources.USER);\n    if (Object.keys(formats).length > 0) {\n      quill.formatLine(range.index - length, length, formats, Quill.sources.USER);\n    }\n    quill.focus();\n  });\n\n  // Put this backspace binding to second (after backspce_offset1 it's going to be third)\n  quill.keyboard.bindings[8].splice(1, 0, quill.keyboard.bindings[8].pop());\n}","map":{"version":3,"mappings":"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","names":["attributeDiff","backspaceBindingsRangeAny","quill","keyboard","addBinding","key","altKey","ctrlKey","metaKey","shiftKey","collapsed","range","context","length","index","getLength","getLine","_quill$getLine2","line","formats","offset","_quill$getLine4","prev","curFormats","prevFormats","getFormat","previousLineLength","previousChar","getText","beforePreviousChar","list","setSelection","Quill","sources","SILENT","test","prefix","deleteText","USER","Object","keys","formatLine","focus","bindings","splice","pop"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-core-0.27.0/app/packs/src/decidim/editor/modified_backspace_offset_any.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\nimport attributeDiff from \"src/decidim/editor/attribute_diff\"\n\nexport default function backspaceBindingsRangeAny(quill) {\n  quill.keyboard.addBinding({ key: 8, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null, collapsed: true }, (range, context) => {\n    let length = 1;\n    if (range.index === 0 || quill.getLength() <= 1) {\n      return;\n    }\n    let [line] = quill.getLine(range.index);\n    let formats = {};\n    if (context.offset === 0) {\n      let [prev] = quill.getLine(range.index - 1);\n      if (prev !== null && prev.length() > 1) {\n        let curFormats = line.formats();\n        let prevFormats = quill.getFormat(range.index - 1, 1);\n        formats = attributeDiff(curFormats, prevFormats) || {};\n        const previousLineLength = quill.getLine(range.index - 1)[1];\n        const previousChar = quill.getText(range.index - 1, 1)\n        const beforePreviousChar = quill.getText(range.index - 2, 1);\n        if (previousLineLength && previousLineLength === 1 && beforePreviousChar === \"\\n\") {\n          if (prevFormats && prevFormats.list) {\n            quill.setSelection(range.index - 2, Quill.sources.SILENT);\n          } else if (previousChar === \"\\n\" && beforePreviousChar === \"\\n\") {\n            length += 1;\n          }\n        }\n      }\n    }\n\n    if ((/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/).test(context.prefix)) {\n      length += 1;\n    }\n    quill.deleteText(range.index - length, length, Quill.sources.USER);\n\n    if (Object.keys(formats).length > 0) {\n      quill.formatLine(range.index - length, length, formats, Quill.sources.USER);\n    }\n    quill.focus();\n  })\n\n  // Put this backspace binding to second (after backspce_offset1 it's going to be third)\n  quill.keyboard.bindings[8].splice(1, 0, quill.keyboard.bindings[8].pop());\n}\n\n"]},"metadata":{},"sourceType":"module"}