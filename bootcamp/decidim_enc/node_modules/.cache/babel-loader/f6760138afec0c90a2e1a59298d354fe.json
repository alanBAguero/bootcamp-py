{"ast":null,"code":"/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds.\n * @param {Object} context - the context for the called function.\n * @param {Function} func - the function to be executed.\n * @param {int} wait - number of milliseconds to wait before executing the function.\n * @private\n * @returns {Void} - Returns nothing.\n */\nexport default function delayed(context, func, wait) {\n  var timeout = null;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(function () {\n      timeout = null;\n      Reflect.apply(func, context, args);\n    }, wait);\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,OAAO,CAACC,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAE;EACnD,IAAIC,OAAO,GAAG,IAAI;EAElB,OAAO,YAAkB;IAAA,kCAANC,IAAI;MAAJA,IAAI;IAAA;IACrB,IAAID,OAAO,EAAE;MACXE,YAAY,CAACF,OAAO,CAAC;IACvB;IACAA,OAAO,GAAGG,UAAU,CAAC,YAAM;MACzBH,OAAO,GAAG,IAAI;MACdI,OAAO,CAACC,KAAK,CAACP,IAAI,EAAED,OAAO,EAAEI,IAAI,CAAC;IACpC,CAAC,EAAEF,IAAI,CAAC;EACV,CAAC;AACH","names":["delayed","context","func","wait","timeout","args","clearTimeout","setTimeout","Reflect","apply"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-core-0.27.0/app/packs/src/decidim/delayed.js"],"sourcesContent":["/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds.\n * @param {Object} context - the context for the called function.\n * @param {Function} func - the function to be executed.\n * @param {int} wait - number of milliseconds to wait before executing the function.\n * @private\n * @returns {Void} - Returns nothing.\n */\nexport default function delayed(context, func, wait) {\n  let timeout = null;\n\n  return function(...args) {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(() => {\n      timeout = null;\n      Reflect.apply(func, context, args);\n    }, wait);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}