{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { DirectUpload } from \"@rails/activestorage\";\nexport var Uploader = /*#__PURE__*/function () {\n  function Uploader(modal, uploadItem, options) {\n    _classCallCheck(this, Uploader);\n    this.modal = modal;\n    this.uploadItem = uploadItem;\n    this.progressBar = uploadItem.querySelector(\".progress-bar\");\n    this.validationSent = false;\n    this.fileTooBig = false;\n    if (modal.options.maxFileSize && options.file.size > modal.options.maxFileSize) {\n      this.fileTooBig = true;\n      this.showError([modal.locales.file_size_too_large]);\n    } else {\n      this.upload = new DirectUpload(options.file, options.url, this);\n    }\n  }\n  _createClass(Uploader, [{\n    key: \"showError\",\n    value: function showError(errors) {\n      this.progressBar.classList.add(\"filled\");\n      this.progressBar.innerHTML = this.modal.locales.validation_error;\n      this.uploadItem.dataset.state = \"error\";\n      var errorList = this.uploadItem.querySelector(\".upload-errors\");\n      errors.forEach(function (error) {\n        var errorItem = document.createElement(\"li\");\n        errorItem.classList.add(\"form-error\", \"is-visible\");\n        errorItem.innerHTML = error;\n        errorList.appendChild(errorItem);\n      });\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(blobId) {\n      var _this = this;\n      var callback = function callback(data) {\n        var errors = [];\n        for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            value = _Object$entries$_i[1];\n          errors = errors.concat(value);\n        }\n        _this.progressBar.style.justifyContent = \"center\";\n        if (errors.length === 0) {\n          _this.progressBar.innerHTML = _this.modal.locales.uploaded;\n          _this.uploadItem.dataset.state = \"validated\";\n        } else {\n          _this.showError(errors);\n        }\n        _this.progressBar.classList.add(\"filled\");\n      };\n      if (!this.validationSent) {\n        var property = this.modal.options.addAttribute;\n        if (this.modal.options.titled) {\n          property = \"file\";\n        }\n        var params = new URLSearchParams({\n          resourceClass: this.modal.options.resourceClass,\n          property: property,\n          blob: blobId,\n          formClass: this.modal.options.formObjectClass\n        });\n        fetch(\"/upload_validations?\".concat(params.toString()), {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRF-Token\": $(\"meta[name=csrf-token]\").attr(\"content\")\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          callback(data);\n        });\n        this.validationSent = true;\n      }\n    }\n  }, {\n    key: \"directUploadWillStoreFileWithXHR\",\n    value: function directUploadWillStoreFileWithXHR(request) {\n      var _this2 = this;\n      request.upload.addEventListener(\"progress\", function (event) {\n        var progress = Math.floor(event.loaded / event.total * 100);\n        var width = \"15%\";\n        if (progress > 15) {\n          width = \"\".concat(progress, \"%\");\n        }\n        _this2.progressBar.style.width = width;\n        if (progress === 100) {\n          _this2.progressBar.innerHTML = _this2.modal.locales.validating;\n          return;\n        }\n        _this2.progressBar.innerHTML = \"\".concat(progress, \"%\");\n      });\n    }\n  }]);\n  return Uploader;\n}();","map":{"version":3,"mappings":"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","names":["DirectUpload","Uploader","modal","uploadItem","options","_classCallCheck","progressBar","querySelector","validationSent","fileTooBig","maxFileSize","file","size","showError","locales","file_size_too_large","upload","url","_createClass","key","value","errors","classList","add","innerHTML","validation_error","dataset","state","errorList","forEach","error","errorItem","document","createElement","appendChild","blobId","callback","data","Object","entries","concat","_this","style","justifyContent","length","uploaded","property","addAttribute","titled","params","URLSearchParams","resourceClass","blob","formClass","formObjectClass","fetch","toString","method","headers","$","attr","then","response","json","request","addEventListener","event","progress","Math","floor","loaded","total","width","_this2","validating"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-core-0.27.0/app/packs/src/decidim/direct_uploads/uploader.js"],"sourcesContent":["import { DirectUpload } from \"@rails/activestorage\";\n\nexport class Uploader {\n  constructor(modal, uploadItem, options) {\n    this.modal = modal;\n    this.uploadItem = uploadItem;\n    this.progressBar = uploadItem.querySelector(\".progress-bar\");\n    this.validationSent = false;\n    this.fileTooBig = false;\n    if (modal.options.maxFileSize && options.file.size > modal.options.maxFileSize) {\n      this.fileTooBig = true;\n      this.showError([modal.locales.file_size_too_large]);\n    } else {\n      this.upload = new DirectUpload(options.file, options.url, this);\n    }\n  }\n\n  showError(errors) {\n    this.progressBar.classList.add(\"filled\");\n    this.progressBar.innerHTML = this.modal.locales.validation_error;\n    this.uploadItem.dataset.state = \"error\";\n    const errorList = this.uploadItem.querySelector(\".upload-errors\");\n    errors.forEach((error) => {\n      const errorItem = document.createElement(\"li\");\n      errorItem.classList.add(\"form-error\", \"is-visible\");\n      errorItem.innerHTML = error;\n      errorList.appendChild(errorItem);\n    })\n  }\n\n  validate(blobId) {\n    const callback = (data) => {\n      let errors = []\n      for (const [, value] of Object.entries(data)) {\n        errors = errors.concat(value);\n      }\n\n      this.progressBar.style.justifyContent = \"center\";\n      if (errors.length === 0) {\n        this.progressBar.innerHTML = this.modal.locales.uploaded;\n        this.uploadItem.dataset.state = \"validated\";\n      } else {\n        this.showError(errors);\n      }\n      this.progressBar.classList.add(\"filled\");\n    }\n\n    if (!this.validationSent) {\n      let property = this.modal.options.addAttribute;\n      if (this.modal.options.titled) {\n        property = \"file\"\n      }\n      const params = new URLSearchParams({\n        resourceClass: this.modal.options.resourceClass,\n        property: property,\n        blob: blobId,\n        formClass: this.modal.options.formObjectClass\n      });\n\n      fetch(`/upload_validations?${params.toString()}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRF-Token\": $(\"meta[name=csrf-token]\").attr(\"content\")\n        }\n      }).then((response) => response.json()).then((data) => {\n        callback(data);\n      });\n      this.validationSent = true;\n    }\n  }\n\n  directUploadWillStoreFileWithXHR(request) {\n    request.upload.addEventListener(\"progress\", (event) => {\n      const progress = Math.floor(event.loaded / event.total * 100);\n      let width = \"15%\";\n      if (progress > 15) {\n        width = `${progress}%`;\n      }\n      this.progressBar.style.width = width;\n\n      if (progress === 100) {\n        this.progressBar.innerHTML = this.modal.locales.validating;\n        return;\n      }\n      this.progressBar.innerHTML = `${progress}%`;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}