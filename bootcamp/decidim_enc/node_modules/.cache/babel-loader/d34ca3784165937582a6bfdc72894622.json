{"ast":null,"code":"/* eslint-disable multiline-ternary, no-ternary */\n\n/*\n *\n * This is used to make sure users are redirected to\n * the expected URL after sign in.\n *\n * When a button or link trigger a login modal we capture\n * the event and inject the URL where the user should\n * be redirected after sign in (the redirect_url param).\n *\n * The code is injected to any form or link in the modal\n * and when the modal is closed we remove the injected\n * code.\n *\n * In order for this to work the button or link must have\n * a data-open attribute with the ID of the modal to open\n * and a data-redirect-url attribute with the URL to redirect\n * the user. If any of this is missing no code will be\n * injected.\n *\n */\n$(function () {\n  var removeUrlParameter = function removeUrlParameter(url, parameter) {\n    var urlParts = url.split(\"?\");\n    if (urlParts.length >= 2) {\n      // Get first part, and remove from array\n      var urlBase = urlParts.shift();\n\n      // Join it back up\n      var queryString = urlParts.join(\"?\");\n      var prefix = \"\".concat(encodeURIComponent(parameter), \"=\");\n      var parts = queryString.split(/[&;]/g);\n\n      // Reverse iteration as may be destructive\n      for (var index = parts.length - 1; index >= 0; index -= 1) {\n        // Idiom for string.startsWith\n        if (parts[index].lastIndexOf(prefix, 0) !== -1) {\n          parts.splice(index, 1);\n        }\n      }\n      if (parts.length === 0) {\n        return urlBase;\n      }\n      return \"\".concat(urlBase, \"?\").concat(parts.join(\"&\"));\n    }\n    return url;\n  };\n  $(document).on(\"click.zf.trigger\", function (event) {\n    var target = \"#\".concat($(event.target).data(\"open\"));\n    var redirectUrl = $(event.target).data(\"redirectUrl\");\n    if (target && redirectUrl) {\n      $(\"<input type='hidden' />\").attr(\"id\", \"redirect_url\").attr(\"name\", \"redirect_url\").attr(\"value\", redirectUrl).appendTo(\"\".concat(target, \" form\"));\n      $(\"\".concat(target, \" a\")).attr(\"href\", function (index, href) {\n        var querystring = jQuery.param({\n          \"redirect_url\": redirectUrl\n        });\n        return href + (href.match(/\\?/) ? \"&\" : \"?\") + querystring;\n      });\n    }\n  });\n  $(document).on(\"closed.zf.reveal\", function (event) {\n    $(\"#redirect_url\", event.target).remove();\n    $(\"a\", event.target).attr(\"href\", function (index, href) {\n      if (href && href.indexOf(\"redirect_url\") !== -1) {\n        return removeUrlParameter(href, \"redirect_url\");\n      }\n      return href;\n    });\n  });\n});","map":{"version":3,"mappings":"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","names":["$","removeUrlParameter","url","parameter","urlParts","split","length","urlBase","shift","queryString","join","prefix","encodeURIComponent","parts","index","lastIndexOf","splice","document","on","event","target","data","redirectUrl","attr","appendTo","href","querystring","jQuery","param","match","remove","indexOf"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-core-0.27.0/app/packs/src/decidim/append_redirect_url_to_modals.js"],"sourcesContent":["/* eslint-disable multiline-ternary, no-ternary */\n\n/*\n *\n * This is used to make sure users are redirected to\n * the expected URL after sign in.\n *\n * When a button or link trigger a login modal we capture\n * the event and inject the URL where the user should\n * be redirected after sign in (the redirect_url param).\n *\n * The code is injected to any form or link in the modal\n * and when the modal is closed we remove the injected\n * code.\n *\n * In order for this to work the button or link must have\n * a data-open attribute with the ID of the modal to open\n * and a data-redirect-url attribute with the URL to redirect\n * the user. If any of this is missing no code will be\n * injected.\n *\n */\n$(() => {\n  const removeUrlParameter = (url, parameter) => {\n    const urlParts = url.split(\"?\");\n\n    if (urlParts.length >= 2) {\n      // Get first part, and remove from array\n      const urlBase = urlParts.shift();\n\n      // Join it back up\n      const queryString = urlParts.join(\"?\");\n\n      const prefix = `${encodeURIComponent(parameter)}=`;\n      const parts = queryString.split(/[&;]/g);\n\n      // Reverse iteration as may be destructive\n      for (let index = parts.length - 1; index >= 0; index -= 1) {\n        // Idiom for string.startsWith\n        if (parts[index].lastIndexOf(prefix, 0) !== -1) {\n          parts.splice(index, 1);\n        }\n      }\n\n      if (parts.length === 0) {\n        return urlBase;\n      }\n\n      return `${urlBase}?${parts.join(\"&\")}`;\n    }\n\n    return url;\n  }\n\n  $(document).on(\"click.zf.trigger\", (event) => {\n    const target = `#${$(event.target).data(\"open\")}`;\n    const redirectUrl = $(event.target).data(\"redirectUrl\");\n\n    if (target && redirectUrl) {\n      $(\"<input type='hidden' />\").\n        attr(\"id\", \"redirect_url\").\n        attr(\"name\", \"redirect_url\").\n        attr(\"value\", redirectUrl).\n        appendTo(`${target} form`);\n\n      $(`${target} a`).attr(\"href\", (index, href) => {\n        const querystring = jQuery.param({\"redirect_url\": redirectUrl});\n        return href + (href.match(/\\?/) ? \"&\" : \"?\") + querystring;\n      });\n    }\n  });\n\n  $(document).on(\"closed.zf.reveal\", (event) => {\n    $(\"#redirect_url\", event.target).remove();\n    $(\"a\", event.target).attr(\"href\", (index, href) => {\n      if (href && href.indexOf(\"redirect_url\") !== -1) {\n        return removeUrlParameter(href, \"redirect_url\");\n      }\n\n      return href;\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"module"}