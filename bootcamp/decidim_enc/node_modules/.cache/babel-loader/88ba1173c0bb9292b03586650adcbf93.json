{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nvar CONTROLLER_REGISTRY = {};\nvar MapControllerRegistry = /*#__PURE__*/function () {\n  function MapControllerRegistry() {\n    _classCallCheck(this, MapControllerRegistry);\n  }\n  _createClass(MapControllerRegistry, null, [{\n    key: \"getController\",\n    value: function getController(mapId) {\n      return CONTROLLER_REGISTRY[mapId];\n    }\n  }, {\n    key: \"setController\",\n    value: function setController(mapId, map) {\n      CONTROLLER_REGISTRY[mapId] = map;\n    }\n  }, {\n    key: \"findByMap\",\n    value: function findByMap(map) {\n      return Object.values(CONTROLLER_REGISTRY).find(function (ctrl) {\n        return ctrl.getMap() === map;\n      });\n    }\n  }]);\n  return MapControllerRegistry;\n}();\nexport { MapControllerRegistry as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,mBAAmB,GAAG,CAAC,CAAC;AAAC,IAEVC,qBAAqB;EAAA;IAAAC;EAAA;EAAAC;IAAAC;IAAAC,OACxC,uBAAqBC,KAAK,EAAE;MAC1B,OAAON,mBAAmB,CAACM,KAAK,CAAC;IACnC;EAAC;IAAAF;IAAAC,OAED,uBAAqBC,KAAK,EAAEC,GAAG,EAAE;MAC/BP,mBAAmB,CAACM,KAAK,CAAC,GAAGC,GAAG;IAClC;EAAC;IAAAH;IAAAC,OAED,mBAAiBE,GAAG,EAAE;MACpB,OAAOC,MAAM,CAACC,MAAM,CAACT,mBAAmB,CAAC,CAACU,IAAI,CAAC,UAACC,IAAI,EAAK;QACvD,OAAOA,IAAI,CAACC,MAAM,EAAE,KAAKL,GAAG;MAC9B,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA;AAAA,SAbkBN,qBAAqB","names":["CONTROLLER_REGISTRY","MapControllerRegistry","_classCallCheck","_createClass","key","value","mapId","map","Object","values","find","ctrl","getMap"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-core-0.27.0/app/packs/src/decidim/map/controller_registry.js"],"sourcesContent":["const CONTROLLER_REGISTRY = {};\n\nexport default class MapControllerRegistry {\n  static getController(mapId) {\n    return CONTROLLER_REGISTRY[mapId];\n  }\n\n  static setController(mapId, map) {\n    CONTROLLER_REGISTRY[mapId] = map;\n  }\n\n  static findByMap(map) {\n    return Object.values(CONTROLLER_REGISTRY).find((ctrl) => {\n      return ctrl.getMap() === map;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}