{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/**\n * A custom confirm dialog for Decidim based on Foundation reveals.\n *\n * Note that this needs to be loaded before the application JS in order for\n * it to gain control over the confirm events BEFORE rails-ujs is loaded.\n */\n\nimport Rails from \"@rails/ujs\";\nvar TEMPLATE_HTML = null;\nvar ConfirmDialog = /*#__PURE__*/function () {\n  function ConfirmDialog(sourceElement) {\n    _classCallCheck(this, ConfirmDialog);\n    this.$modal = $(TEMPLATE_HTML);\n    this.$source = sourceElement;\n    this.$content = $(\".confirm-modal-content\", this.$modal);\n    this.$buttonConfirm = $(\"[data-confirm-ok]\", this.$modal);\n    this.$buttonCancel = $(\"[data-confirm-cancel]\", this.$modal);\n\n    // Avoid duplicate IDs and append the new modal to the body\n    var titleId = \"confirm-modal-title-\".concat(Math.random().toString(36).substring(7));\n    this.$modal.removeAttr(\"id\");\n    $(\"#confirm-modal-title\", this.$modal).attr(\"id\", titleId);\n    this.$modal.attr(\"aria-labelledby\", titleId);\n    $(\"body\").append(this.$modal);\n    this.$modal.foundation();\n  }\n  _createClass(ConfirmDialog, [{\n    key: \"confirm\",\n    value: function confirm(message) {\n      var _this = this;\n      this.$content.html(message);\n      this.$buttonConfirm.off(\"click\");\n      this.$buttonCancel.off(\"click\");\n      return new Promise(function (resolve) {\n        _this.$buttonConfirm.on(\"click\", function (ev) {\n          ev.preventDefault();\n          _this.$modal.foundation(\"close\");\n          resolve(true);\n          _this.$source.focus();\n        });\n        _this.$buttonCancel.on(\"click\", function (ev) {\n          ev.preventDefault();\n          _this.$modal.foundation(\"close\");\n          resolve(false);\n          _this.$source.focus();\n        });\n        _this.$modal.foundation(\"open\").on(\"closed.zf.reveal\", function () {\n          _this.$modal.remove();\n        });\n      });\n    }\n  }]);\n  return ConfirmDialog;\n}(); // Override the default confirm dialog by Rails\n// See:\n// https://github.com/rails/rails/blob/fba1064153d8e2f4654df7762a7d3664b93e9fc8/actionview/app/assets/javascripts/rails-ujs/features/confirm.coffee\n//\n// There is apparently a better way coming in Rails 6:\n// https://github.com/rails/rails/commit/e9aa7ecdee0aa7bb4dcfa5046881bde2f1fe21cc#diff-e1aaa45200e9adcbcb8baf1c5375b5d1\n//\n// The old approach is broken according to https://github.com/rails/rails/issues/36686#issuecomment-514213323\n// so for the moment this needs to be executed **before** Rails.start()\nvar allowAction = function allowAction(ev, element) {\n  var message = $(element).data(\"confirm\");\n  if (!message) {\n    return true;\n  }\n  if (!Rails.fire(element, \"confirm\")) {\n    return false;\n  }\n  if (TEMPLATE_HTML === null) {\n    TEMPLATE_HTML = $(\"#confirm-modal\")[0].outerHTML;\n    $(\"#confirm-modal\").remove();\n  }\n  var dialog = new ConfirmDialog($(element));\n  dialog.confirm(message).then(function (answer) {\n    var completed = Rails.fire(element, \"confirm:complete\", [answer]);\n    if (answer && completed) {\n      // Allow the event to propagate normally and re-dispatch it without\n      // the confirm data attribute which the Rails internal method is\n      // checking.\n      $(element).data(\"confirm\", null);\n      $(element).removeAttr(\"data-confirm\");\n\n      // The submit button click events won't do anything if they are\n      // dispatched as is. In these cases, just submit the underlying form.\n      if (ev.type === \"click\" && ($(element).is('button[type=\"submit\"]') || $(element).is('input[type=\"submit\"]'))) {\n        $(element).parents(\"form\").submit();\n      } else {\n        var origEv = ev.originalEvent || ev;\n        var newEv = origEv;\n        if (typeof Event === \"function\") {\n          // Clone the event because otherwise some click events may not\n          // work properly when re-dispatched.\n          newEv = new origEv.constructor(origEv.type, origEv);\n        }\n        ev.target.dispatchEvent(newEv);\n      }\n    }\n  });\n  return false;\n};\nvar handleConfirm = function handleConfirm(ev, element) {\n  if (!allowAction(ev, element)) {\n    Rails.stopEverything(ev);\n  }\n};\nvar getMatchingEventTarget = function getMatchingEventTarget(ev, selector) {\n  var target = ev.target;\n  while (!(!(target instanceof Element) || Rails.matches(target, selector))) {\n    target = target.parentNode;\n  }\n  if (target instanceof Element) {\n    return target;\n  }\n  return null;\n};\nvar handleDocumentEvent = function handleDocumentEvent(ev, matchSelectors) {\n  return matchSelectors.some(function (currentSelector) {\n    var target = getMatchingEventTarget(ev, currentSelector);\n    if (target === null) {\n      return false;\n    }\n    handleConfirm(ev, target);\n    return true;\n  });\n};\ndocument.addEventListener(\"click\", function (ev) {\n  return handleDocumentEvent(ev, [Rails.linkClickSelector, Rails.buttonClickSelector, Rails.formInputClickSelector]);\n});\ndocument.addEventListener(\"change\", function (ev) {\n  return handleDocumentEvent(ev, [Rails.inputChangeSelector]);\n});\ndocument.addEventListener(\"submit\", function (ev) {\n  return handleDocumentEvent(ev, [Rails.formSubmitSelector]);\n});\n\n// This is needed for the confirm dialog to work with Foundation Abide.\n// Abide registers its own submit click listeners since Foundation 5.6.x\n// which will be handled before the document listeners above. This would\n// break the custom confirm functionality when used with Foundation Abide.\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  $(Rails.formInputClickSelector).on(\"click.confirm\", function (ev) {\n    handleConfirm(ev, getMatchingEventTarget(ev, Rails.formInputClickSelector));\n  });\n});","map":{"version":3,"mappings":"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","names":["Rails","TEMPLATE_HTML","ConfirmDialog","sourceElement","_classCallCheck","$modal","$","$source","$content","$buttonConfirm","$buttonCancel","titleId","Math","random","toString","substring","removeAttr","attr","append","foundation","_createClass","key","value","message","html","off","Promise","resolve","_this","on","ev","preventDefault","focus","remove","allowAction","element","data","fire","outerHTML","dialog","confirm","then","answer","completed","type","is","parents","submit","origEv","originalEvent","newEv","Event","constructor","target","dispatchEvent","handleConfirm","stopEverything","getMatchingEventTarget","selector","Element","matches","parentNode","handleDocumentEvent","matchSelectors","some","currentSelector","document","addEventListener","linkClickSelector","buttonClickSelector","formInputClickSelector","inputChangeSelector","formSubmitSelector"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-core-0.27.0/app/packs/src/decidim/confirm.js"],"sourcesContent":["/**\n * A custom confirm dialog for Decidim based on Foundation reveals.\n *\n * Note that this needs to be loaded before the application JS in order for\n * it to gain control over the confirm events BEFORE rails-ujs is loaded.\n */\n\nimport Rails from \"@rails/ujs\"\n\nlet TEMPLATE_HTML = null;\n\nclass ConfirmDialog {\n  constructor(sourceElement) {\n    this.$modal = $(TEMPLATE_HTML);\n    this.$source = sourceElement;\n    this.$content = $(\".confirm-modal-content\", this.$modal);\n    this.$buttonConfirm = $(\"[data-confirm-ok]\", this.$modal);\n    this.$buttonCancel = $(\"[data-confirm-cancel]\", this.$modal);\n\n    // Avoid duplicate IDs and append the new modal to the body\n    const titleId = `confirm-modal-title-${Math.random().toString(36).substring(7)}`;\n\n    this.$modal.removeAttr(\"id\");\n    $(\"#confirm-modal-title\", this.$modal).attr(\"id\", titleId);\n    this.$modal.attr(\"aria-labelledby\", titleId);\n\n    $(\"body\").append(this.$modal);\n    this.$modal.foundation();\n  }\n\n  confirm(message) {\n    this.$content.html(message);\n\n    this.$buttonConfirm.off(\"click\");\n    this.$buttonCancel.off(\"click\");\n\n    return new Promise((resolve) => {\n      this.$buttonConfirm.on(\"click\", (ev) => {\n        ev.preventDefault();\n\n        this.$modal.foundation(\"close\");\n        resolve(true);\n        this.$source.focus();\n      });\n      this.$buttonCancel.on(\"click\", (ev) => {\n        ev.preventDefault();\n\n        this.$modal.foundation(\"close\");\n        resolve(false);\n        this.$source.focus();\n      });\n\n      this.$modal.foundation(\"open\").on(\"closed.zf.reveal\", () => {\n        this.$modal.remove();\n      });\n    });\n  }\n}\n\n// Override the default confirm dialog by Rails\n// See:\n// https://github.com/rails/rails/blob/fba1064153d8e2f4654df7762a7d3664b93e9fc8/actionview/app/assets/javascripts/rails-ujs/features/confirm.coffee\n//\n// There is apparently a better way coming in Rails 6:\n// https://github.com/rails/rails/commit/e9aa7ecdee0aa7bb4dcfa5046881bde2f1fe21cc#diff-e1aaa45200e9adcbcb8baf1c5375b5d1\n//\n// The old approach is broken according to https://github.com/rails/rails/issues/36686#issuecomment-514213323\n// so for the moment this needs to be executed **before** Rails.start()\nconst allowAction = (ev, element) => {\n  const message = $(element).data(\"confirm\");\n  if (!message) {\n    return true;\n  }\n\n  if (!Rails.fire(element, \"confirm\")) {\n    return false;\n  }\n\n  if (TEMPLATE_HTML === null) {\n    TEMPLATE_HTML = $(\"#confirm-modal\")[0].outerHTML;\n    $(\"#confirm-modal\").remove();\n  }\n\n  const dialog = new ConfirmDialog(\n    $(element)\n  );\n  dialog.confirm(message).then((answer) => {\n    const completed = Rails.fire(element, \"confirm:complete\", [answer]);\n    if (answer && completed) {\n      // Allow the event to propagate normally and re-dispatch it without\n      // the confirm data attribute which the Rails internal method is\n      // checking.\n      $(element).data(\"confirm\", null);\n      $(element).removeAttr(\"data-confirm\");\n\n      // The submit button click events won't do anything if they are\n      // dispatched as is. In these cases, just submit the underlying form.\n      if (ev.type === \"click\" &&\n        (\n          $(element).is('button[type=\"submit\"]') ||\n          $(element).is('input[type=\"submit\"]')\n        )\n      ) {\n        $(element).parents(\"form\").submit();\n      } else {\n        let origEv = ev.originalEvent || ev;\n        let newEv = origEv;\n        if (typeof Event === \"function\") {\n          // Clone the event because otherwise some click events may not\n          // work properly when re-dispatched.\n          newEv = new origEv.constructor(origEv.type, origEv);\n        }\n        ev.target.dispatchEvent(newEv);\n      }\n    }\n  });\n\n  return false;\n};\nconst handleConfirm = (ev, element) => {\n  if (!allowAction(ev, element)) {\n    Rails.stopEverything(ev);\n  }\n};\nconst getMatchingEventTarget = (ev, selector) => {\n  let target = ev.target;\n  while (!(!(target instanceof Element) || Rails.matches(target, selector))) {\n    target = target.parentNode;\n  }\n\n  if (target instanceof Element) {\n    return target;\n  }\n\n  return null;\n};\nconst handleDocumentEvent = (ev, matchSelectors) => {\n  return matchSelectors.some((currentSelector) => {\n    let target = getMatchingEventTarget(ev, currentSelector);\n    if (target === null) {\n      return false;\n    }\n\n    handleConfirm(ev, target);\n    return true;\n  });\n};\n\ndocument.addEventListener(\"click\", (ev) => {\n  return handleDocumentEvent(ev, [\n    Rails.linkClickSelector,\n    Rails.buttonClickSelector,\n    Rails.formInputClickSelector\n  ]);\n});\ndocument.addEventListener(\"change\", (ev) => {\n  return handleDocumentEvent(ev, [Rails.inputChangeSelector]);\n});\ndocument.addEventListener(\"submit\", (ev) => {\n  return handleDocumentEvent(ev, [Rails.formSubmitSelector]);\n});\n\n// This is needed for the confirm dialog to work with Foundation Abide.\n// Abide registers its own submit click listeners since Foundation 5.6.x\n// which will be handled before the document listeners above. This would\n// break the custom confirm functionality when used with Foundation Abide.\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  $(Rails.formInputClickSelector).on(\"click.confirm\", (ev) => {\n    handleConfirm(ev, getMatchingEventTarget(ev, Rails.formInputClickSelector));\n  });\n});\n"]},"metadata":{},"sourceType":"module"}