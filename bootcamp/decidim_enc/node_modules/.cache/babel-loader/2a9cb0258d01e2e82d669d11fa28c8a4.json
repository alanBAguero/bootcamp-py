{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nvar AutoSelectOptionsFromUrl = /*#__PURE__*/function () {\n  function AutoSelectOptionsFromUrl() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, AutoSelectOptionsFromUrl);\n    this.$source = options.source;\n    this.$select = options.select;\n    this.sourceToParams = options.sourceToParams;\n    this.run();\n  }\n  _createClass(AutoSelectOptionsFromUrl, [{\n    key: \"run\",\n    value: function run() {\n      this.$source.on(\"change\", this._onSourceChange.bind(this));\n      this._onSourceChange();\n    }\n  }, {\n    key: \"_onSourceChange\",\n    value: function _onSourceChange() {\n      var select = this.$select;\n      var params = this.sourceToParams(this.$source);\n      var url = this.$source.data(\"url\");\n      $.getJSON(url, params, function (data) {\n        select.find(\"option:not([value=''])\").remove();\n        var selectedValue = select.data(\"selected\");\n        data.forEach(function (option) {\n          var optionElement = $(\"<option value=\\\"\".concat(option.id, \"\\\">\").concat(option.body, \"</option>\")).appendTo(select);\n          if (option.id === selectedValue) {\n            optionElement.attr(\"selected\", true);\n          }\n        });\n        if (selectedValue) {\n          select.val(selectedValue);\n        }\n      });\n    }\n  }]);\n  return AutoSelectOptionsFromUrl;\n}();\nexport { AutoSelectOptionsFromUrl as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;IAAqBA,wBAAwB;EAC3C,oCAA0B;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAAAC;IACtB,IAAI,CAACC,OAAO,GAAGF,OAAO,CAACG,MAAM;IAC7B,IAAI,CAACC,OAAO,GAAGJ,OAAO,CAACK,MAAM;IAC7B,IAAI,CAACC,cAAc,GAAGN,OAAO,CAACM,cAAc;IAC5C,IAAI,CAACC,GAAG,EAAE;EACZ;EAACC;IAAAC;IAAAC,OAED,eAAM;MACJ,IAAI,CAACR,OAAO,CAACS,EAAE,CAAC,QAAQ,EAAE,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;MAC1D,IAAI,CAACD,eAAe,EAAE;IACxB;EAAC;IAAAH;IAAAC,OAED,2BAAkB;MAChB,IAAML,MAAM,GAAG,IAAI,CAACD,OAAO;MAC3B,IAAMU,MAAM,GAAG,IAAI,CAACR,cAAc,CAAC,IAAI,CAACJ,OAAO,CAAC;MAChD,IAAMa,GAAG,GAAG,IAAI,CAACb,OAAO,CAACc,IAAI,CAAC,KAAK,CAAC;MAEpCC,CAAC,CAACC,OAAO,CAACH,GAAG,EAAED,MAAM,EAAE,UAAUE,IAAI,EAAE;QACrCX,MAAM,CAACc,IAAI,CAAC,wBAAwB,CAAC,CAACC,MAAM,EAAE;QAC9C,IAAMC,aAAa,GAAGhB,MAAM,CAACW,IAAI,CAAC,UAAU,CAAC;QAE7CA,IAAI,CAACM,OAAO,CAAC,UAACC,MAAM,EAAK;UACvB,IAAIC,aAAa,GAAGP,CAAC,2BAAmBM,MAAM,CAACE,EAAE,gBAAKF,MAAM,CAACG,IAAI,eAAY,CAACC,QAAQ,CAACtB,MAAM,CAAC;UAC9F,IAAIkB,MAAM,CAACE,EAAE,KAAKJ,aAAa,EAAE;YAC/BG,aAAa,CAACI,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC;UACtC;QACF,CAAC,CAAC;QAEF,IAAIP,aAAa,EAAE;UACjBhB,MAAM,CAACwB,GAAG,CAACR,aAAa,CAAC;QAC3B;MACF,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA;AAAA,SAjCkBtB,wBAAwB","names":["AutoSelectOptionsFromUrl","options","_classCallCheck","$source","source","$select","select","sourceToParams","run","_createClass","key","value","on","_onSourceChange","bind","params","url","data","$","getJSON","find","remove","selectedValue","forEach","option","optionElement","id","body","appendTo","attr","val"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-forms-0.27.0/app/packs/src/decidim/forms/admin/auto_select_options_from_url.component.js"],"sourcesContent":["export default class AutoSelectOptionsFromUrl {\n  constructor(options = {}) {\n    this.$source = options.source;\n    this.$select = options.select;\n    this.sourceToParams = options.sourceToParams;\n    this.run();\n  }\n\n  run() {\n    this.$source.on(\"change\", this._onSourceChange.bind(this));\n    this._onSourceChange();\n  }\n\n  _onSourceChange() {\n    const select = this.$select;\n    const params = this.sourceToParams(this.$source);\n    const url = this.$source.data(\"url\");\n\n    $.getJSON(url, params, function (data) {\n      select.find(\"option:not([value=''])\").remove();\n      const selectedValue = select.data(\"selected\");\n\n      data.forEach((option) => {\n        let optionElement = $(`<option value=\"${option.id}\">${option.body}</option>`).appendTo(select);\n        if (option.id === selectedValue) {\n          optionElement.attr(\"selected\", true);\n        }\n      });\n\n      if (selectedValue) {\n        select.val(selectedValue);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}