{"ast":null,"code":"/* eslint-disable require-jsdoc */\n\nvar Parchment = Quill[\"import\"](\"parchment\");\nvar Delta = Quill[\"import\"](\"delta\");\nvar getLineFormats = function getLineFormats(context) {\n  return Object.keys(context.format).reduce(function (formats, format) {\n    // See Parchment registry.ts => (1 << 3) | ((1 << 2) - 1) = 8 | 3 = 11\n    var blockScope = 11;\n    if (Parchment.query(format, blockScope) && !Array.isArray(context.format[format])) {\n      formats[format] = context.format[format];\n    }\n    return formats;\n  }, {});\n};\nvar continueFormats = function continueFormats(quill, context, lineFormats) {\n  Object.keys(context.format).forEach(function (name) {\n    if (typeof lineFormats[name] !== \"undefined\" && lineFormats[name] !== null) {\n      return;\n    }\n    if (Array.isArray(context.format[name])) {\n      return;\n    }\n    if (name === \"link\") {\n      return;\n    }\n    quill.format(name, context.format[name], Quill.sources.USER);\n  });\n};\nvar lineBreakHandler = function lineBreakHandler(quill, range, context) {\n  var _currentLeaf$next, _currentLeaf$next$dom, _nextLeaf$parent, _nextLeaf$parent$domN;\n  var currentLeaf = quill.getLeaf(range.index)[0];\n  var nextLeaf = quill.getLeaf(range.index + 1)[0];\n  var previousChar = quill.getText(range.index - 1, 1);\n  var formats = quill.getFormat(range.index);\n  if ((currentLeaf === null || currentLeaf === void 0 ? void 0 : (_currentLeaf$next = currentLeaf.next) === null || _currentLeaf$next === void 0 ? void 0 : (_currentLeaf$next$dom = _currentLeaf$next.domNode) === null || _currentLeaf$next$dom === void 0 ? void 0 : _currentLeaf$next$dom.tagName) === \"A\" || (nextLeaf === null || nextLeaf === void 0 ? void 0 : (_nextLeaf$parent = nextLeaf.parent) === null || _nextLeaf$parent === void 0 ? void 0 : (_nextLeaf$parent$domN = _nextLeaf$parent.domNode) === null || _nextLeaf$parent$domN === void 0 ? void 0 : _nextLeaf$parent$domN.tagName) === \"A\") {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n    quill.removeFormat(range.index, 1, Quill.sources.SILENT);\n  } else {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  }\n  if (nextLeaf === null) {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  } else if (context.offset === 1 && previousChar === \"\\n\") {\n    var delta = new Delta().retain(range.index).insert(\"\\n\");\n    quill.updateContents(delta, Quill.sources.USER);\n  }\n  Object.keys(formats).forEach(function (format) {\n    quill.format(format, context.format[format], Quill.sources.USER);\n  });\n  quill.setSelection(range.index + 1, Quill.sources.SILENT);\n  var lineFormats = getLineFormats(context);\n  continueFormats(quill, context, lineFormats);\n};\nexport default function addEnterBindings(quill) {\n  quill.keyboard.addBinding({\n    key: 13,\n    shiftKey: true\n  }, function (range, context) {\n    lineBreakHandler(quill, range, context);\n  });\n\n  // HAX: make our SHIFT+ENTER binding the second (first is added below) in order to override Quill defaults\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n  quill.keyboard.addBinding({\n    key: 13,\n    shiftKey: false\n  }, function (range, context) {\n    var lineFormats = getLineFormats(context);\n    var previousChar = quill.getText(range.index - 1, 1);\n    var nextChar = quill.getText(range.index, 1);\n    var delta = new Delta().retain(range.index).insert(\"\\n\", lineFormats);\n    // const length = context.prefix.length;\n    if (previousChar === \"\" || previousChar === \"\\n\") {\n      if (lineFormats.list && nextChar === \"\\n\") {\n        if (quill.getLength() - range.index > 2) {\n          var endFormatDelta = new Delta().retain(range.index - 1)[\"delete\"](1);\n          quill.updateContents(endFormatDelta, Quill.sources.USER);\n        } else {\n          // Delete empty list item and end the list\n          var _endFormatDelta = new Delta().retain(range.index - 1)[\"delete\"](1).retain(range.index).insert(\"\\n\");\n          quill.updateContents(_endFormatDelta, Quill.sources.USER);\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        }\n      } else {\n        quill.updateContents(delta, Quill.sources.USER);\n        if (context.offset === 1 && previousChar === \"\\n\") {\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        } else {\n          quill.setSelection(range.index + 2, Quill.sources.SILENT);\n        }\n      }\n    } else {\n      quill.updateContents(delta, Quill.sources.USER);\n      quill.setSelection(range.index + 1, Quill.sources.SILENT);\n    }\n    quill.focus();\n    continueFormats(quill, context, lineFormats);\n  });\n\n  // Replace the default enter handling because we have modified the break element\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n  return;\n}","map":{"version":3,"mappings":"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","names":["Parchment","Quill","Delta","getLineFormats","context","Object","keys","format","reduce","formats","blockScope","query","Array","isArray","continueFormats","quill","lineFormats","forEach","name","sources","USER","lineBreakHandler","range","currentLeaf","getLeaf","index","nextLeaf","previousChar","getText","getFormat","next","_currentLeaf$next","domNode","_currentLeaf$next$dom","tagName","parent","_nextLeaf$parent","_nextLeaf$parent$domN","insertEmbed","removeFormat","SILENT","offset","delta","retain","insert","updateContents","setSelection","addEnterBindings","keyboard","addBinding","key","shiftKey","bindings","unshift","pop","nextChar","list","getLength","endFormatDelta","focus"],"sources":["/home/alan/.rvm/gems/ruby-3.0.3/gems/decidim-core-0.27.0/app/packs/src/decidim/editor/modified_enter.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\nconst Parchment = Quill.import(\"parchment\")\nconst Delta = Quill.import(\"delta\");\n\nconst getLineFormats = (context) => {\n  return Object.keys(context.format).reduce(\n    (formats, format) => {\n      // See Parchment registry.ts => (1 << 3) | ((1 << 2) - 1) = 8 | 3 = 11\n      const blockScope = 11;\n      if (\n        Parchment.query(format, blockScope) &&\n        !Array.isArray(context.format[format])\n      ) {\n        formats[format] = context.format[format];\n      }\n      return formats;\n    },\n    {},\n  );\n}\n\nconst continueFormats = (quill, context, lineFormats) => {\n  Object.keys(context.format).forEach((name) => {\n    if (typeof lineFormats[name] !== \"undefined\" && lineFormats[name] !== null) {\n      return;\n    }\n    if (Array.isArray(context.format[name])) {\n      return;\n    }\n    if (name === \"link\") {\n      return;\n    }\n    quill.format(name, context.format[name], Quill.sources.USER);\n  });\n}\n\nconst lineBreakHandler = (quill, range, context) => {\n  const currentLeaf = quill.getLeaf(range.index)[0];\n  const nextLeaf = quill.getLeaf(range.index + 1)[0];\n  const previousChar = quill.getText(range.index - 1, 1);\n  const formats = quill.getFormat(range.index);\n\n  if (currentLeaf?.next?.domNode?.tagName === \"A\" || nextLeaf?.parent?.domNode?.tagName === \"A\") {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n    quill.removeFormat(range.index, 1, Quill.sources.SILENT)\n  } else {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  }\n\n  if (nextLeaf === null) {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  } else if (context.offset === 1 && previousChar === \"\\n\") {\n    const delta = new Delta().retain(range.index).insert(\"\\n\");\n    quill.updateContents(delta, Quill.sources.USER);\n  }\n\n  Object.keys(formats).forEach((format) => {\n    quill.format(format, context.format[format], Quill.sources.USER);\n  });\n  quill.setSelection(range.index + 1, Quill.sources.SILENT);\n\n  const lineFormats = getLineFormats(context);\n  continueFormats(quill, context, lineFormats);\n};\n\nexport default function addEnterBindings(quill) {\n  quill.keyboard.addBinding({\n    key: 13,\n    shiftKey: true\n  }, (range, context) => {\n    lineBreakHandler(quill, range, context);\n  });\n\n  // HAX: make our SHIFT+ENTER binding the second (first is added below) in order to override Quill defaults\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n\n  quill.keyboard.addBinding({ key: 13, shiftKey: false }, (range, context) => {\n    const lineFormats = getLineFormats(context);\n    const previousChar = quill.getText(range.index - 1, 1);\n    const nextChar = quill.getText(range.index, 1);\n    const delta = new Delta().retain(range.index).insert(\"\\n\", lineFormats);\n    // const length = context.prefix.length;\n    if (previousChar === \"\" || previousChar === \"\\n\") {\n      if (lineFormats.list && nextChar === \"\\n\") {\n        if (quill.getLength() - range.index > 2) {\n          const endFormatDelta = new Delta().retain(range.index - 1).delete(1);\n          quill.updateContents(endFormatDelta, Quill.sources.USER);\n        } else {\n          // Delete empty list item and end the list\n          const endFormatDelta = new Delta().retain(range.index - 1).delete(1).retain(range.index).insert(\"\\n\");\n          quill.updateContents(endFormatDelta, Quill.sources.USER);\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        }\n      } else {\n        quill.updateContents(delta, Quill.sources.USER);\n        if (context.offset === 1 && previousChar === \"\\n\") {\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        } else {\n          quill.setSelection(range.index + 2, Quill.sources.SILENT);\n        }\n      }\n    } else {\n      quill.updateContents(delta, Quill.sources.USER);\n      quill.setSelection(range.index + 1, Quill.sources.SILENT);\n    }\n    quill.focus();\n\n    continueFormats(quill, context, lineFormats);\n  });\n\n  // Replace the default enter handling because we have modified the break element\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n  return;\n}\n\n"]},"metadata":{},"sourceType":"module"}